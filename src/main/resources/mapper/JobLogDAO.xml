<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zyc.jobmanager.dao.JobLogDAO">
  <resultMap id="BaseResultMap" type="com.zyc.jobmanager.entity.JobLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="job_name" jdbcType="VARCHAR" property="job_name" />
    <result column="job_type" jdbcType="VARCHAR" property="job_type" />
    <result column="start_time" jdbcType="TIMESTAMP" property="start_time" />
    <result column="end_time" jdbcType="TIMESTAMP" property="end_time" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zyc.jobmanager.entity.JobLog">
    <result column="run_result" jdbcType="LONGVARCHAR" property="run_result" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, job_name, job_type, start_time, end_time
  </sql>
  <sql id="Blob_Column_List">
    run_result
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.zyc.jobmanager.entity.JobLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
    <if test="forUpdate != null and forUpdate == true">
      for update
    </if>
  </select>
  <select id="selectByExample" parameterType="com.zyc.jobmanager.entity.JobLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
    <if test="forUpdate != null and forUpdate == true">
      for update
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from job_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from job_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zyc.jobmanager.entity.JobLogExample">
    delete from job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zyc.jobmanager.entity.JobLog">
    insert into job_log (id, job_name, job_type, 
      start_time, end_time, run_result
      )
    values (#{id,jdbcType=INTEGER}, #{job_name,jdbcType=VARCHAR}, #{job_type,jdbcType=VARCHAR}, 
      #{start_time,jdbcType=TIMESTAMP}, #{end_time,jdbcType=TIMESTAMP}, #{run_result,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zyc.jobmanager.entity.JobLog">
    insert into job_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="job_name != null">
        job_name,
      </if>
      <if test="job_type != null">
        job_type,
      </if>
      <if test="start_time != null">
        start_time,
      </if>
      <if test="end_time != null">
        end_time,
      </if>
      <if test="run_result != null">
        run_result,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="job_name != null">
        #{job_name,jdbcType=VARCHAR},
      </if>
      <if test="job_type != null">
        #{job_type,jdbcType=VARCHAR},
      </if>
      <if test="start_time != null">
        #{start_time,jdbcType=TIMESTAMP},
      </if>
      <if test="end_time != null">
        #{end_time,jdbcType=TIMESTAMP},
      </if>
      <if test="run_result != null">
        #{run_result,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zyc.jobmanager.entity.JobLogExample" resultType="java.lang.Long">
    select count(*) from job_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update job_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.job_name != null">
        job_name = #{record.job_name,jdbcType=VARCHAR},
      </if>
      <if test="record.job_type != null">
        job_type = #{record.job_type,jdbcType=VARCHAR},
      </if>
      <if test="record.start_time != null">
        start_time = #{record.start_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.end_time != null">
        end_time = #{record.end_time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.run_result != null">
        run_result = #{record.run_result,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update job_log
    set id = #{record.id,jdbcType=INTEGER},
      job_name = #{record.job_name,jdbcType=VARCHAR},
      job_type = #{record.job_type,jdbcType=VARCHAR},
      start_time = #{record.start_time,jdbcType=TIMESTAMP},
      end_time = #{record.end_time,jdbcType=TIMESTAMP},
      run_result = #{record.run_result,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update job_log
    set id = #{record.id,jdbcType=INTEGER},
      job_name = #{record.job_name,jdbcType=VARCHAR},
      job_type = #{record.job_type,jdbcType=VARCHAR},
      start_time = #{record.start_time,jdbcType=TIMESTAMP},
      end_time = #{record.end_time,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zyc.jobmanager.entity.JobLog">
    update job_log
    <set>
      <if test="job_name != null">
        job_name = #{job_name,jdbcType=VARCHAR},
      </if>
      <if test="job_type != null">
        job_type = #{job_type,jdbcType=VARCHAR},
      </if>
      <if test="start_time != null">
        start_time = #{start_time,jdbcType=TIMESTAMP},
      </if>
      <if test="end_time != null">
        end_time = #{end_time,jdbcType=TIMESTAMP},
      </if>
      <if test="run_result != null">
        run_result = #{run_result,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zyc.jobmanager.entity.JobLog">
    update job_log
    set job_name = #{job_name,jdbcType=VARCHAR},
      job_type = #{job_type,jdbcType=VARCHAR},
      start_time = #{start_time,jdbcType=TIMESTAMP},
      end_time = #{end_time,jdbcType=TIMESTAMP},
      run_result = #{run_result,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zyc.jobmanager.entity.JobLog">
    update job_log
    set job_name = #{job_name,jdbcType=VARCHAR},
      job_type = #{job_type,jdbcType=VARCHAR},
      start_time = #{start_time,jdbcType=TIMESTAMP},
      end_time = #{end_time,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>